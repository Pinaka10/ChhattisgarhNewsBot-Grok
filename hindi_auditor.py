#!/usr/bin/env python3
"""
Hindi Content Auditor
Professional Hindi standards enforcement
Zero-cost local processing
"""

import json
import re
import logging
from datetime import datetime
import os

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/auditor.log'),
        logging.StreamHandler()
    ]
)

class HindiContentAuditor:
    def __init__(self):
        # Professional replacements for casual/inappropriate terms
        self.replacements = {
            # Casual to formal
            'рдпрд╛рд░': 'рдорд┐рддреНрд░',
            'рднрд╛рдИ': 'рд╡реНрдпрдХреНрддрд┐',
            'рдЕрд░реЗ': '',
            'рд╡рд╛рд╣': '',
            'рдЬрдмрд░рджрд╕реНрдд': 'рдорд╣рддреНрд╡рдкреВрд░реНрдг',
            'рдХрдорд╛рд▓': 'рдЙрд▓реНрд▓реЗрдЦрдиреАрдп',
            'рдзрдорд╛рдХрд╛': 'рдШрдЯрдирд╛',
            'рдмрд╡рд╛рд▓': 'рд╡рд┐рд╡рд╛рдж',
            'рдлрдЯрд╛рдлрдЯ': 'рддреБрд░рдВрдд',
            'рдЭрдЯрдкрдЯ': 'рд╢реАрдШреНрд░',
            
            # English to Hindi
            'shocking': 'рдЪрд┐рдВрддрд╛рдЬрдирдХ',
            'awesome': 'рдорд╣рддреНрд╡рдкреВрд░реНрдг',
            'amazing': 'рдЖрд╢реНрдЪрд░реНрдпрдЬрдирдХ',
            'fantastic': 'рдЙрддреНрдХреГрд╖реНрдЯ',
            'super': 'рдЕрддреНрдпрдзрд┐рдХ',
            'cool': 'рдЕрдЪреНрдЫрд╛',
            'wow': '',
            'ok': 'рдареАрдХ',
            'sorry': 'рдЦреЗрдж',
            'thanks': 'рдзрдиреНрдпрд╡рд╛рдж',
            
            # Inappropriate terms (replace with professional alternatives)
            'рдорд╛рд░': 'рд╣рдорд▓рд╛',
            'рдкреАрдЯ': 'рдкреНрд░рд╣рд╛рд░',
            'рдлрдВрд╕рд╛': 'рдЧрд┐рд░рдлреНрддрд╛рд░',
            'рдкрдХрдбрд╝рд╛': 'рдЧрд┐рд░рдлреНрддрд╛рд░',
            'рднрд╛рдЧрд╛': 'рдлрд░рд╛рд░',
            'рдЫреБрдкрд╛': 'рдЕрдЬреНрдЮрд╛рдд рд╕реНрдерд╛рди рдкрд░',
            
            # Sensational to neutral
            'рд╕рдирд╕рдиреАрдЦреЗрдЬ': 'рдорд╣рддреНрд╡рдкреВрд░реНрдг',
            'рд╣реИрд░рд╛рди': 'рдЖрд╢реНрдЪрд░реНрдпрдЪрдХрд┐рдд',
            'рдкрд░реЗрд╢рд╛рди': 'рдЪрд┐рдВрддрд┐рдд',
            'рдЧреБрд╕реНрд╕рд╛': 'рдирд╛рд░рд╛рдЬрд╝',
            'рдЦреБрд╢': 'рдкреНрд░рд╕рдиреНрди'
        }
        
        # Words to remove completely
        self.remove_words = [
            'рдЕрд░реЗ', 'рд╡рд╛рд╣', 'рд╣рд╛рдп', 'рдУрд╣', 'рдЖрд╣', 'рдЙрдлреНрдл', 'рдЫреА', 'рдереВ',
            'wow', 'omg', 'wtf', 'damn', 'shit', 'fuck', 'hell'
        ]
        
        # Professional news prefixes
        self.news_categories = {
            'crime': 'ЁЯЪи',
            'politics': 'ЁЯУМ',
            'development': 'ЁЯПЧя╕П',
            'education': 'ЁЯУЪ',
            'health': 'ЁЯПе',
            'sports': 'тЪ╜',
            'weather': 'ЁЯМдя╕П',
            'economy': 'ЁЯТ░',
            'agriculture': 'ЁЯМ╛',
            'technology': 'ЁЯТ╗'
        }
    
    def clean_text(self, text):
        """Clean and professionalize text"""
        if not text:
            return text
        
        # Convert to string if not already
        text = str(text)
        
        # Remove extra whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        
        # Apply replacements
        for old_word, new_word in self.replacements.items():
            # Case-insensitive replacement
            pattern = re.compile(re.escape(old_word), re.IGNORECASE)
            text = pattern.sub(new_word, text)
        
        # Remove inappropriate words
        for word in self.remove_words:
            pattern = re.compile(r'\b' + re.escape(word) + r'\b', re.IGNORECASE)
            text = pattern.sub('', text)
        
        # Clean up extra spaces after removals
        text = re.sub(r'\s+', ' ', text).strip()
        
        # Ensure proper sentence structure
        text = self.fix_sentence_structure(text)
        
        return text
    
    def fix_sentence_structure(self, text):
        """Fix basic sentence structure issues"""
        if not text:
            return text
        
        # Ensure first letter is capitalized
        if text and text[0].islower():
            text = text[0].upper() + text[1:]
        
        # Remove multiple punctuation
        text = re.sub(r'[ред.]{2,}', 'ред', text)
        text = re.sub(r'[!]{2,}', '!', text)
        text = re.sub(r'[?]{2,}', '?', text)
        
        # Ensure proper ending punctuation
        if text and text[-1] not in 'ред.!?':
            text += 'ред'
        
        return text
    
    def categorize_news(self, title):
        """Categorize news and add appropriate emoji"""
        title_lower = title.lower()
        
        crime_keywords = ['рдкреБрд▓рд┐рд╕', 'рдЧрд┐рд░рдлреНрддрд╛рд░', 'рдЪреЛрд░реА', 'рд╣рддреНрдпрд╛', 'рдЕрдкрд░рд╛рдз', 'рдорд╛рдорд▓рд╛', 'рдлреНрд░реЙрдб']
        politics_keywords = ['рдореБрдЦреНрдпрдордВрддреНрд░реА', 'рдордВрддреНрд░реА', 'рд╡рд┐рдзрд╛рдпрдХ', 'рдЪреБрдирд╛рд╡', 'рд╕рд░рдХрд╛рд░', 'рдиреЗрддрд╛']
        development_keywords = ['рд╡рд┐рдХрд╛рд╕', 'рдпреЛрдЬрдирд╛', 'рдкрд░рд┐рдпреЛрдЬрдирд╛', 'рдирд┐рд░реНрдорд╛рдг', 'рдЙрджреНрдШрд╛рдЯрди']
        
        if any(keyword in title_lower for keyword in crime_keywords):
            return 'ЁЯЪи'
        elif any(keyword in title_lower for keyword in politics_keywords):
            return 'ЁЯУМ'
        elif any(keyword in title_lower for keyword in development_keywords):
            return 'ЁЯПЧя╕П'
        else:
            return 'ЁЯУ░'
    
    def audit_news_item(self, news_item):
        """Audit a single news item"""
        try:
            audited_item = news_item.copy()
            
            # Clean the title
            original_title = news_item.get('title', '')
            cleaned_title = self.clean_text(original_title)
            
            # Add category emoji
            emoji = self.categorize_news(cleaned_title)
            audited_item['title'] = f"{emoji} {cleaned_title}"
            
            # Track changes
            audited_item['audit_info'] = {
                'original_title': original_title,
                'cleaned_title': cleaned_title,
                'changes_made': original_title != cleaned_title,
                'audit_timestamp': datetime.now().isoformat()
            }
            
            return audited_item
            
        except Exception as e:
            logging.error(f"Error auditing news item: {str(e)}")
            return news_item
    
    def audit_news_data(self, news_data):
        """Audit all news data"""
        if not news_data:
            return []
        
        audited_data = []
        changes_count = 0
        
        for item in news_data:
            audited_item = self.audit_news_item(item)
            audited_data.append(audited_item)
            
            if audited_item.get('audit_info', {}).get('changes_made', False):
                changes_count += 1
        
        logging.info(f"Audited {len(news_data)} items, made changes to {changes_count} items")
        return audited_data
    
    def save_audited_news(self, audited_data):
        """Save audited news data"""
        try:
            os.makedirs('data', exist_ok=True)
            
            filename = f"data/audited_news_{datetime.now().strftime('%Y%m%d_%H%M')}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(audited_data, f, ensure_ascii=False, indent=2)
            
            # Save as latest audited
            with open('data/latest_audited.json', 'w', encoding='utf-8') as f:
                json.dump(audited_data, f, ensure_ascii=False, indent=2)
            
            logging.info(f"Audited news saved to {filename}")
            return filename
            
        except Exception as e:
            logging.error(f"Error saving audited news: {str(e)}")
            return None

def main():
    """Main auditing function"""
    logging.info("Starting Hindi content audit...")
    
    try:
        # Load latest news data
        with open('data/latest.json', 'r', encoding='utf-8') as f:
            news_data = json.load(f)
        
        auditor = HindiContentAuditor()
        audited_data = auditor.audit_news_data(news_data)
        
        if audited_data:
            filename = auditor.save_audited_news(audited_data)
            if filename:
                logging.info(f"Successfully audited {len(audited_data)} news items")
            else:
                logging.error("Failed to save audited data")
        else:
            logging.warning("No audited data to save")
            
    except FileNotFoundError:
        logging.error("No news data found to audit")
    except Exception as e:
        logging.error(f"Error in auditing process: {str(e)}")

if __name__ == "__main__":
    main()
